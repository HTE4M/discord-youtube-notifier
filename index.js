const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');
const xml2js = require('xml2js');
const fs = require('fs');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

// config
const token = '‡πÉ‡∏™‡πà Discord Bot Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì';
const announceChannelId = '‡πÉ‡∏™‡πà Channel ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®';
const YOUTUBE_CHANNEL_ID = '‡πÉ‡∏™‡πà YouTube Channel ID';

// ‡πÇ‡∏´‡∏•‡∏î videoId ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
let postedVideos = [];
if (fs.existsSync('postedVideos.json')) {
  postedVideos = JSON.parse(fs.readFileSync('postedVideos.json'));
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
client.once('ready', () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
  checkFirstTime();
  setInterval(checkYouTube, 600000); // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å videoId ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
async function checkFirstTime() {
  if (postedVideos.length > 0) return;

  console.log(`üì¶ [${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}] ‡πÇ‡∏´‡∏•‡∏î videoId ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å...`);

  try {
    const res = await axios.get(`https://www.youtube.com/feeds/videos.xml?channel_id=${YOUTUBE_CHANNEL_ID}`);
    const parsed = await xml2js.parseStringPromise(res.data);

    if (parsed.feed.entry && parsed.feed.entry.length > 0) {
      postedVideos = parsed.feed.entry.map(video => video['yt:videoId'][0]);
      fs.writeFileSync('postedVideos.json', JSON.stringify(postedVideos, null, 2));
      console.log(`‚úÖ ‡πÄ‡∏Å‡πá‡∏ö videoId ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${postedVideos.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } else {
      console.log(`üì≠ ‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠`);
    }
  } catch (error) {
    console.error(`‚ùå ‡πÇ‡∏´‡∏•‡∏î videoId ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
  }
}

// ‡πÄ‡∏ä‡πá‡∏Ñ YouTube
async function checkYouTube() {
  console.log(`[${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}] üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ YouTube...`);
  try {
    const res = await axios.get(`https://www.youtube.com/feeds/videos.xml?channel_id=${YOUTUBE_CHANNEL_ID}`);
    const parsed = await xml2js.parseStringPromise(res.data);

    if (!parsed.feed.entry || parsed.feed.entry.length === 0) {
      console.log(`üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠`);
      return;
    }

    const latestVideo = parsed.feed.entry[0];
    const videoId = latestVideo['yt:videoId'][0];
    const videoTitle = latestVideo.title[0];

    if (!postedVideos.includes(videoId)) {
      const announceChannel = client.channels.cache.get(announceChannelId);
      const isShorts = videoTitle.toLowerCase().includes('#shorts');

      if (isShorts) {
        announceChannel.send(`üì± Shorts ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô YouTube: **${videoTitle}**\nhttps://www.youtube.com/shorts/${videoId}`);
        console.log(`üì± ‡∏û‡∏ö Shorts ‡πÉ‡∏´‡∏°‡πà: ${videoTitle}`);
      } else {
        announceChannel.send(`üé• ‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô YouTube: **${videoTitle}**\nhttps://youtu.be/${videoId}`);
        console.log(`üé• ‡∏û‡∏ö‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà: ${videoTitle}`);
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° videoId ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
      postedVideos.push(videoId);
      fs.writeFileSync('postedVideos.json', JSON.stringify(postedVideos, null, 2));
    } else {
      console.log(`‚è∏Ô∏è ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß: ${videoTitle}`);
    }
  } catch (error) {
    console.error(`‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ YouTube ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:`, error.message);
  }
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó
client.login(token);
