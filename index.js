// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å .env
require('dotenv').config();

// import module ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');
const xml2js = require('xml2js');
const sqlite = require('sqlite');
const sqlite3 = require('sqlite3');
const fs = require('fs');
const path = require('path');

// üìå config ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
const config = {
  token: process.env.DISCORD_TOKEN, // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å .env
  announceChannelId: 'YOUR_ANNOUNCE_CHANNEL_ID', // ID ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  youtubeChannelId: 'YOUR_YOUTUBE_CHANNEL_ID', // ‡∏ä‡πà‡∏≠‡∏á YouTube ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  checkInterval: 300000, // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô ms)
  dbFile: 'videos.db' // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå database SQLite
};

// üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á client Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages
  ]
});

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ db ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
let db;

// üìå ‡∏Ñ‡∏∑‡∏ô timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
function getTimestamp() {
  return new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
}

// üìå ‡∏Ñ‡∏∑‡∏ô path ‡∏Ç‡∏≠‡∏á log file ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
function getLogFilePath() {
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // yyyy-mm-dd
  const logDir = path.join(__dirname, 'logs');
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir);
  }
  return path.join(logDir, `${dateStr}.log`);
}

// üìå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á console ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå log
function writeLog(message) {
  const logLine = `[${getTimestamp()}] ${message}\n`;
  console.log(logLine.trim());
  fs.appendFile(getLogFilePath(), logLine, err => {
    if (err) console.error(`‚ùå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message}`);
  });
}

// üìå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord channel ‡∏û‡∏£‡πâ‡∏≠‡∏° log
async function sendAnnouncement(channel, message, log) {
  if (channel) {
    await channel.send(message);
    writeLog(log);
  } else {
    writeLog(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö announceChannel ID: ${config.announceChannelId}`);
  }
}

// üìå ‡∏î‡∏∂‡∏á YouTube Feed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö retry ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error
async function fetchYouTubeFeedWithRetry(retries = 3, delay = 1000, totalTimeLimit = 10000) {
  const startTime = Date.now();

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const res = await axios.get(`https://www.youtube.com/feeds/videos.xml?channel_id=${config.youtubeChannelId}`);
      return xml2js.parseStringPromise(res.data);
    } catch (error) {
      const elapsed = Date.now() - startTime;
      writeLog(`‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î YouTube feed ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (attempt ${attempt}): ${error.message}`);

      if (elapsed >= totalTimeLimit) {
        writeLog(`‚õî ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô ${totalTimeLimit / 1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`);
        throw error;
      }

      if (attempt < retries) {
        await new Promise(res => setTimeout(res, delay * attempt));
      } else {
        throw error;
      }
    }
  }
}

// üìå log ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô videoId ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function logTotalVideos() {
  const row = await db.get(`SELECT COUNT(*) AS count FROM videos`);
  writeLog(`‚úÖ ‡πÄ‡∏Å‡πá‡∏ö videoId ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${row.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
}

// üìå ‡πÇ‡∏´‡∏•‡∏î videoId ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô channel ‡∏•‡∏á database ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà
async function preloadYouTubeVideos() {
  writeLog(`üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î videoId ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å...`);
  try {
    const parsed = await fetchYouTubeFeedWithRetry();
    if (!parsed.feed.entry?.length) {
      writeLog(`üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠`);
      return;
    }

    const videoIds = parsed.feed.entry.map(video => video['yt:videoId'][0]);

    for (const videoId of videoIds) {
      await db.run(`INSERT OR IGNORE INTO videos (videoId) VALUES (?)`, videoId);
    }

    await logTotalVideos();
  } catch (error) {
    writeLog(`‚ùå preload videoId ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
  }
}

// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö YouTube feed ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏´‡∏°
async function checkYouTube() {
  writeLog(`üîç ‡πÄ‡∏ä‡πá‡∏Ñ YouTube...`);
  try {
    const parsed = await fetchYouTubeFeedWithRetry();
    if (!parsed.feed.entry?.length) {
      writeLog(`üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠`);
      return;
    }

    const announceChannel = client.channels.cache.get(config.announceChannelId);

    for (const entry of parsed.feed.entry) {
      const videoId = entry['yt:videoId'][0];
      const videoTitle = entry.title[0];
      const titleLower = videoTitle.toLowerCase();

      // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ videoId ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const row = await db.get(`SELECT videoId FROM videos WHERE videoId = ?`, videoId);
      if (row) {
        writeLog(`‚è∏Ô∏è ${videoTitle} - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
        continue;
      }

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
      if (titleLower.includes('#live')) {
        await sendAnnouncement(
          announceChannel,
          `üî¥ ‡πÑ‡∏•‡∏ü‡πå‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô YouTube: **${videoTitle}**\nhttps://youtu.be/${videoId}`,
          `üî¥ ‡∏û‡∏ö‡πÑ‡∏•‡∏ü‡πå‡πÉ‡∏´‡∏°‡πà: ${videoTitle}`
        );
      } else if (titleLower.includes('#shorts')) {
        await sendAnnouncement(
          announceChannel,
          `üì± Shorts ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô YouTube: **${videoTitle}**\nhttps://www.youtube.com/shorts/${videoId}`,
          `üì± ‡∏û‡∏ö Shorts ‡πÉ‡∏´‡∏°‡πà: ${videoTitle}`
        );
      } else {
        await sendAnnouncement(
          announceChannel,
          `üé• ‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô YouTube: **${videoTitle}**\nhttps://youtu.be/${videoId}`,
          `üé• ‡∏û‡∏ö‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà: ${videoTitle}`
        );
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å videoId ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await db.run(`INSERT INTO videos (videoId) VALUES (?)`, videoId);
    }

    await logTotalVideos();
  } catch (error) {
    writeLog(`‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ YouTube ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${error.message}`);
  }
}

// üìå ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
client.once('ready', async () => {
  writeLog(`‚úÖ Logged in as ${client.user.tag}`);

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
  db = await sqlite.open({ filename: config.dbFile, driver: sqlite3.Database });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á table videos ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  await db.run(`CREATE TABLE IF NOT EXISTS videos (videoId TEXT PRIMARY KEY)`);

  // ‡πÇ‡∏´‡∏•‡∏î videoId ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  await preloadYouTubeVideos();

  // ‡∏ï‡∏±‡πâ‡∏á interval ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏¢‡∏∞
  setInterval(checkYouTube, config.checkInterval);
});

// üìå login ‡πÄ‡∏Ç‡πâ‡∏≤ Discord
client.login(config.token);
